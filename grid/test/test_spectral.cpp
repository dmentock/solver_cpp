#include <gtest/gtest.h>
#include <gmock/gmock.h>

#include <spectral.h>

#include "simple_grid_setup.hpp"
#include "init_environments.hpp"

#include <unsupported/Eigen/CXX11/Tensor>
#include <fftw3-mpi.h>
#include <random>

#include <test/complex_concatenator.h>
#include <tensor_operations.h>
#include <helper.h>

TEST_F(GridTestSetup, SpectralTestInit) {
  
  MockDiscretizedGrid mock_grid(std::array<int, 3>{2,1,1});

  gridTestSetup_init_discretization(mock_grid);
  Spectral spectral;

  Eigen::Tensor<std::complex<double>, 4> expected_xi1st(3, 2, 1, 1);
  expected_xi1st.setValues({
   {{{ c( 0 ,  0 ) }},
    {{ c( 0 ,  0 ) }}},
   {{{ c( 0 ,  0 ) }},
    {{ c( 0 ,  0 ) }}},
   {{{ c( 0 ,  0 ) }},
    {{ c( 0 ,  0 ) }}}
  });

  Eigen::Tensor<std::complex<double>, 4> expected_xi2nd;
  expected_xi2nd.resize(3, 2, 1, 1);
  expected_xi2nd.setValues({
   {{{ c( 0               ,  0                ) }},
    {{ c( 0               ,  314159.2653589793) }}},
   {{{ c( 0               ,  0                ) }},
    {{ c( 0               ,  0                ) }}},
   {{{ c( 0               ,  0                ) }},
    {{ c( 0               ,  0                ) }}}
  });

  spectral.init(0, mock_grid);
  EXPECT_TRUE(tensor_eq(spectral.xi1st, expected_xi1st));
  EXPECT_TRUE(tensor_eq(spectral.xi2nd, expected_xi2nd));
  // TODO: mock calls to set_up_fftw template function
}

TEST_F(GridTestSetup, SpectralTestHomogenizationFetchTensors) {
  MockDiscretizedGrid mock_grid(std::array<int, 3>{2,1,1});

  gridTestSetup_init_discretization(mock_grid);
  Spectral spectral;
  gridTestSetup_mock_homogenization_tensors(spectral, mock_grid.n_cells_local);
  f_deallocate_resources();
}

TEST_F(GridTestSetup, SpectralTestConstitutiveResponse) {
  class PartialMockSpectral : public Spectral {
    public:
    using array2 = std::array<int, 2>;
    MOCK_METHOD(void, mechanical_response, (double Delta_t, int cell_start, int cell_end), (override));
    MOCK_METHOD(void, thermal_response, (double Delta_t, int cell_start, int cell_end), (override));
    MOCK_METHOD(void, mechanical_response2, (double Delta_t, array2& FEsolving_execIP, array2& FEsolving_execElem), (override));
  };

  MockDiscretizedGrid mock_grid(std::array<int, 3>{2,1,1});

  gridTestSetup_init_discretization(mock_grid);
  PartialMockSpectral spectral;
  gridTestSetup_mock_homogenization_tensors(spectral, mock_grid.n_cells_local);

  spectral.wgt = 0.5;
  
  spectral.homogenization_dPdF->setValues({
   {{{{  159842489344.4433 ,  159972848994.13599 },
      { -1504219541.5565622, -1689836307.3836253 },
      {  3448398456.3962173, -2102190460.1164069 }},
     {{ -1504219541.556551 , -1689836307.3836384 },
      {  95515693258.175293,  91421799586.101868 },
      {  397176716.55049217, -1733315101.8327127 }},
     {{  3448398456.3962283, -2102190460.1164093 },
      {  397176716.55048251, -1733315101.8327119 },
      {  92351794310.386627,  96315328332.7677   }}},
    {{{ -1504219541.5565717, -1689836307.3836272 },
      {  32478211607.960251,  28384317935.887001 },
      {  397176716.55047393, -1733315101.832706  }},
     {{  32478211607.960377,  28384317935.886948 },
      {  3794034107.7043304,  3061285023.9171753 },
      { -1798204152.5553036, -674227858.25496078 }},
     {{  397176716.55048466, -1733315101.8327007 },
      { -1798204152.5553031, -674227858.25495911 },
      { -2289814566.1477509, -1371448716.5334778 }}},
    {{{  3448398456.3962212, -2102190460.1164107 },
      {  397176716.55047107, -1733315101.8327065 },
      {  29314312660.171581,  33277846682.552811 }},
     {{  397176716.5504818 , -1733315101.8327031 },
      { -1798204152.5553017, -674227858.25495911 },
      { -2289814566.1477551, -1371448716.5334837 }},
     {{  29314312660.171707,  33277846682.552757 },
      { -2289814566.1477566, -1371448716.5334852 },
      { -1650194303.8409281,  2776418318.3713531 }}}},
   {{{{ -1504219541.5565605, -1689836307.3836365 },
      {  32478211607.960388,  28384317935.886944 },
      {  397176716.55048269, -1733315101.8327076 }},
     {{  32478211607.960255,  28384317935.887012 },
      {  3794034107.7043309,  3061285023.9171615 },
      { -1798204152.5553055, -674227858.25496244 }},
     {{  397176716.55048376, -1733315101.8327024 },
      { -1798204152.5553002, -674227858.25496101 },
      { -2289814566.1477585, -1371448716.5334778 }}},
    {{{  95515693258.175308,  91421799586.101929 },
      {  3794034107.7043247,  3061285023.917181  },
      { -1798204152.5552964, -674227858.25495613 }},
     {{  3794034107.7043424,  3061285023.9171824 },
      {  156612696277.37164,  159441337877.85236 },
      {  2153860905.3987808, -1076600383.6635833 }},
     {{ -1798204152.5552955, -674227858.25496471 },
      {  2153860905.3987808, -1076600383.663578  },
      {  95581587377.458328,  96846839449.05127  }}},
    {{{  397176716.55048752, -1733315101.8327026 },
      { -1798204152.5553038, -674227858.25495815 },
      { -2289814566.1477599, -1371448716.5334854 }},
     {{ -1798204152.5553057, -674227858.25496149 },
      {  2153860905.3987532, -1076600383.6635823 },
      {  32544105727.243263,  33809357798.836369 }},
     {{ -2289814566.1477561, -1371448716.5334842 },
      {  32544105727.243397,  33809357798.836308 },
      { -2551037621.9492874,  2809915485.4962654 }}}},
   {{{{  3448398456.3962164, -2102190460.1164055 },
      {  397176716.55048019, -1733315101.8327076 },
      {  29314312660.171707,  33277846682.552742 }},
     {{  397176716.5504815 , -1733315101.8327029 },
      { -1798204152.5553007, -674227858.25496674 },
      { -2289814566.1477566, -1371448716.5334835 }},
     {{  29314312660.171577,  33277846682.552826 },
      { -2289814566.1477542, -1371448716.5334742 },
      { -1650194303.8409517,  2776418318.3713517 }}},
    {{{  397176716.5504837 , -1733315101.8327045 },
      { -1798204152.5553048, -674227858.25495839 },
      { -2289814566.1477623, -1371448716.5334854 }},
     {{ -1798204152.5553007, -674227858.25495863 },
      {  2153860905.3987808, -1076600383.6635818 },
      {  32544105727.243397,  33809357798.836304 }},
     {{ -2289814566.1477561, -1371448716.5334761 },
      {  32544105727.243271,  33809357798.836376 },
      { -2551037621.9492846,  2809915485.4962573 }}},
    {{{  92351794310.386642,  96315328332.767685 },
      { -2289814566.1477537, -1371448716.5334697 },
      { -1650194303.8409224,  2776418318.3713655 }},
     {{ -2289814566.1477404, -1371448716.5334749 },
      {  95581587377.458328,  96846839449.051208 },
      { -2551037621.9492702,  2809915485.4962602 }},
     {{ -1650194303.8409293,  2776418318.3713498 },
      { -2551037621.9492855,  2809915485.4962564 },
      {  159776595225.16037,  154547809131.18652 }}}}
  });

  // P.setValues({
  //  {{{{  4.6813928926783649e-310 }}, {{  4.6803066082175087e-310 }}},
  //   {{{  0                       }}, {{  4.9406564584124654e-324 }}},
  //   {{{  0                       }}, {{  0                      }}}},
  //  {{{{  0                       }}, {{  4.6803066083258079e-310 }}},
  //   {{{  9                       }}, {{  4.9406564584124654e-324 }}},
  //   {{{  6.9048496684497202e-310 }}, {{  0                      }}}},
  //  {{{{  0                       }}, {{  9.8813129168249309e-324 }}},
  //   {{{  131                     }}, {{  1.9762625833649862e-323 }}},
  //   {{{  4.680306608333713e-310  }}, {{  4.9406564584124654e-324 }}}}
  // });

  Eigen::Tensor<double, 2> P_av(3, 3);
  P_av.setZero();

  Eigen::Tensor<double, 4> C_vol_avg(3, 3, 3, 3);
  C_vol_avg.setZero();

  Eigen::Tensor<double, 4> C_minmax_avg(3, 3, 3, 3);
  C_minmax_avg.setZero();

  Eigen::Tensor<double, 5> F(3, 3, 2, 1, 1);
  F.setValues({
   {{{{  1 }}, {{  1 }}}, {{{  0 }}, {{  0 }}}, {{{  0 }}, {{  0 }}}},
   {{{{  0 }}, {{  0 }}}, {{{  1 }}, {{  1 }}}, {{{  0 }}, {{  0 }}}},
   {{{{  0 }}, {{  0 }}}, {{{  0 }}, {{  0 }}}, {{{  1 }}, {{  1 }}}}
  });
  Eigen::TensorMap<Eigen::Tensor<double, 5>> F_map(F.data(), 3, 3, mock_grid.cells[0], mock_grid.cells[1], mock_grid.cells[2]);

  double delta_t = 0;

  Eigen::Tensor<double, 3> mech2_homogenization_P_mock_result(3, 3, 2);
  mech2_homogenization_P_mock_result.setValues({
   {{ -0.00012625698593137619,  6.7368932803888855e-05 },
    {  2.4478419622059409e-07,  9.2854840990643325e-06 },
    { -5.539774355740229e-06 , -1.4117250738593625e-06 }},
   {{  2.4478419622060764e-07,  9.2854840990643325e-06 },
    { -0.00012980115459804682,  6.0970263434762862e-05 },
    { -8.8118593343441355e-06, -4.1239652459827732e-07 }},
   {{ -5.5397743557402239e-06, -1.4117250738593625e-06 },
    { -8.8118593343441388e-06, -4.1239652459827563e-07 },
    { -0.00012997748173127732,  6.4678614891698315e-05 }}
  });
  EXPECT_CALL(spectral, mechanical_response(testing::_, testing::_, testing::_)).WillOnce(testing::DoDefault());
  EXPECT_CALL(spectral, thermal_response(testing::_, testing::_, testing::_)).WillOnce(testing::DoDefault());
  EXPECT_CALL(spectral, mechanical_response2(testing::_, testing::_, testing::_))
    .WillOnce([&](double Delta_t, 
                  std::array<int, 2>& FEsolving_execIP, 
                  std::array<int, 2>& FEsolving_execElem) {
        *spectral.homogenization_P = mech2_homogenization_P_mock_result;
        return;
    });

  Eigen::Tensor<double, 4> expected_C_vol_avg(3, 3, 3, 3);
  expected_C_vol_avg.setValues({
   {{{  159907669169.28964, -1597027924.4700937,  673103998.13990521 },
     { -1597027924.4700947,  93468746422.13858 , -668069192.64111018 },
     {  673103998.13990951, -668069192.64111471,  94333561321.577164 }},
    {{ -1597027924.4700994,  30431264771.923626, -668069192.64111602 },
     {  30431264771.92366 ,  3427659565.8107529, -1236216005.4051323 },
     { -668069192.64110804, -1236216005.4051311, -1830631641.3406143 }},
    {{  673103998.13990521, -668069192.64111769,  31296079671.362198 },
     { -668069192.64111066, -1236216005.4051304, -1830631641.3406196 },
     {  31296079671.362232, -1830631641.340621 ,  563112007.26521254 }}},
   {{{ -1597027924.4700985,  30431264771.923668, -668069192.64111245 },
     {  30431264771.923634,  3427659565.8107462, -1236216005.405134  },
     { -668069192.64110935, -1236216005.4051306, -1830631641.3406181 }},
    {{  93468746422.138611,  3427659565.8107529, -1236216005.4051263 },
     {  3427659565.8107624,  158027017077.612  ,  538630260.86759877 },
     { -1236216005.4051301,  538630260.86760139,  96214213413.254791 }},
    {{ -668069192.64110756, -1236216005.4051309, -1830631641.3406227 },
     { -1236216005.4051337,  538630260.86758542,  33176731763.039818 },
     { -1830631641.34062  ,  33176731763.039852,  129438931.773489   }}},
   {{{  673103998.13990545, -668069192.64111376,  31296079671.362225 },
     { -668069192.64111066, -1236216005.4051337, -1830631641.34062   },
     {  31296079671.362202, -1830631641.3406143,  563112007.26520002 }},
    {{ -668069192.64111042, -1236216005.4051316, -1830631641.3406239 },
     { -1236216005.4051297,  538630260.86759949,  33176731763.039848 },
     { -1830631641.3406162,  33176731763.039825,  129438931.77348638 }},
    {{  94333561321.577164, -1830631641.3406117,  563112007.2652216  },
     { -1830631641.3406076,  96214213413.254761,  129438931.77349496 },
     {  563112007.26521027,  129438931.77348542,  157162202178.17346 }}}
  });

  Eigen::Tensor<double, 5> P(3, 3, 2, 1, 1);
  P = spectral.constitutive_response(P_av, C_vol_avg, C_minmax_avg, F_map, delta_t);
  EXPECT_TRUE(tensor_eq(C_vol_avg, expected_C_vol_avg));
}

TEST_F(GridTestSetup, SpectralTestConstitutiveResponseRotation) {
  class PartialMockSpectral : public Spectral {
    public:
    using array2 = std::array<int, 2>;
    MOCK_METHOD(void, mechanical_response, (double Delta_t, int cell_start, int cell_end), (override));
    MOCK_METHOD(void, thermal_response, (double Delta_t, int cell_start, int cell_end), (override));
    MOCK_METHOD(void, mechanical_response2, (double Delta_t, array2& FEsolving_execIP, array2& FEsolving_execElem), (override));
  };

  MockDiscretizedGrid mock_grid(std::array<int, 3>{2,1,1});

  gridTestSetup_init_discretization(mock_grid);

  PartialMockSpectral spectral;
  gridTestSetup_mock_homogenization_tensors(spectral, mock_grid.n_cells_local);
  spectral.wgt = 0.5;
  
  spectral.homogenization_dPdF->setValues({
   {{{{  159842489344.4433 ,  159972848994.13599 },
      { -1504219541.5565622, -1689836307.3836253 },
      {  3448398456.3962173, -2102190460.1164069 }},
     {{ -1504219541.556551 , -1689836307.3836384 },
      {  95515693258.175293,  91421799586.101868 },
      {  397176716.55049217, -1733315101.8327127 }},
     {{  3448398456.3962283, -2102190460.1164093 },
      {  397176716.55048251, -1733315101.8327119 },
      {  92351794310.386627,  96315328332.7677   }}},
    {{{ -1504219541.5565717, -1689836307.3836272 },
      {  32478211607.960251,  28384317935.887001 },
      {  397176716.55047393, -1733315101.832706  }},
     {{  32478211607.960377,  28384317935.886948 },
      {  3794034107.7043304,  3061285023.9171753 },
      { -1798204152.5553036, -674227858.25496078 }},
     {{  397176716.55048466, -1733315101.8327007 },
      { -1798204152.5553031, -674227858.25495911 },
      { -2289814566.1477509, -1371448716.5334778 }}},
    {{{  3448398456.3962212, -2102190460.1164107 },
      {  397176716.55047107, -1733315101.8327065 },
      {  29314312660.171581,  33277846682.552811 }},
     {{  397176716.5504818 , -1733315101.8327031 },
      { -1798204152.5553017, -674227858.25495911 },
      { -2289814566.1477551, -1371448716.5334837 }},
     {{  29314312660.171707,  33277846682.552757 },
      { -2289814566.1477566, -1371448716.5334852 },
      { -1650194303.8409281,  2776418318.3713531 }}}},
   {{{{ -1504219541.5565605, -1689836307.3836365 },
      {  32478211607.960388,  28384317935.886944 },
      {  397176716.55048269, -1733315101.8327076 }},
     {{  32478211607.960255,  28384317935.887012 },
      {  3794034107.7043309,  3061285023.9171615 },
      { -1798204152.5553055, -674227858.25496244 }},
     {{  397176716.55048376, -1733315101.8327024 },
      { -1798204152.5553002, -674227858.25496101 },
      { -2289814566.1477585, -1371448716.5334778 }}},
    {{{  95515693258.175308,  91421799586.101929 },
      {  3794034107.7043247,  3061285023.917181  },
      { -1798204152.5552964, -674227858.25495613 }},
     {{  3794034107.7043424,  3061285023.9171824 },
      {  156612696277.37164,  159441337877.85236 },
      {  2153860905.3987808, -1076600383.6635833 }},
     {{ -1798204152.5552955, -674227858.25496471 },
      {  2153860905.3987808, -1076600383.663578  },
      {  95581587377.458328,  96846839449.05127  }}},
    {{{  397176716.55048752, -1733315101.8327026 },
      { -1798204152.5553038, -674227858.25495815 },
      { -2289814566.1477599, -1371448716.5334854 }},
     {{ -1798204152.5553057, -674227858.25496149 },
      {  2153860905.3987532, -1076600383.6635823 },
      {  32544105727.243263,  33809357798.836369 }},
     {{ -2289814566.1477561, -1371448716.5334842 },
      {  32544105727.243397,  33809357798.836308 },
      { -2551037621.9492874,  2809915485.4962654 }}}},
   {{{{  3448398456.3962164, -2102190460.1164055 },
      {  397176716.55048019, -1733315101.8327076 },
      {  29314312660.171707,  33277846682.552742 }},
     {{  397176716.5504815 , -1733315101.8327029 },
      { -1798204152.5553007, -674227858.25496674 },
      { -2289814566.1477566, -1371448716.5334835 }},
     {{  29314312660.171577,  33277846682.552826 },
      { -2289814566.1477542, -1371448716.5334742 },
      { -1650194303.8409517,  2776418318.3713517 }}},
    {{{  397176716.5504837 , -1733315101.8327045 },
      { -1798204152.5553048, -674227858.25495839 },
      { -2289814566.1477623, -1371448716.5334854 }},
     {{ -1798204152.5553007, -674227858.25495863 },
      {  2153860905.3987808, -1076600383.6635818 },
      {  32544105727.243397,  33809357798.836304 }},
     {{ -2289814566.1477561, -1371448716.5334761 },
      {  32544105727.243271,  33809357798.836376 },
      { -2551037621.9492846,  2809915485.4962573 }}},
    {{{  92351794310.386642,  96315328332.767685 },
      { -2289814566.1477537, -1371448716.5334697 },
      { -1650194303.8409224,  2776418318.3713655 }},
     {{ -2289814566.1477404, -1371448716.5334749 },
      {  95581587377.458328,  96846839449.051208 },
      { -2551037621.9492702,  2809915485.4962602 }},
     {{ -1650194303.8409293,  2776418318.3713498 },
      { -2551037621.9492855,  2809915485.4962564 },
      {  159776595225.16037,  154547809131.18652 }}}}
  });

  Eigen::Tensor<double, 2> P_av(3, 3);
  P_av.setValues({
   { -2.9444026563743668e-05,  4.7651341476424633e-06, -3.4757497147997958e-06 },
   {  4.7651341476424701e-06, -3.4415445581641979e-05, -4.6121279294712064e-06 },
   { -3.4757497147997932e-06, -4.6121279294712072e-06, -3.2649433419789505e-05 }
  });

  Eigen::Tensor<double, 4> C_vol_avg(3, 3, 3, 3);
  C_vol_avg.setValues({
   {{{  159907669169.28964, -1597027924.4700937,  673103998.13990521 },
     { -1597027924.4700947,  93468746422.13858 , -668069192.64111018 },
     {  673103998.13990951, -668069192.64111471,  94333561321.577164 }},
    {{ -1597027924.4700994,  30431264771.923626, -668069192.64111602 },
     {  30431264771.92366 ,  3427659565.8107529, -1236216005.4051323 },
     { -668069192.64110804, -1236216005.4051311, -1830631641.3406143 }},
    {{  673103998.13990521, -668069192.64111769,  31296079671.362198 },
     { -668069192.64111066, -1236216005.4051304, -1830631641.3406196 },
     {  31296079671.362232, -1830631641.340621 ,  563112007.26521254 }}},
   {{{ -1597027924.4700985,  30431264771.923668, -668069192.64111245 },
     {  30431264771.923634,  3427659565.8107462, -1236216005.405134  },
     { -668069192.64110935, -1236216005.4051306, -1830631641.3406181 }},
    {{  93468746422.138611,  3427659565.8107529, -1236216005.4051263 },
     {  3427659565.8107624,  158027017077.612  ,  538630260.86759877 },
     { -1236216005.4051301,  538630260.86760139,  96214213413.254791 }},
    {{ -668069192.64110756, -1236216005.4051309, -1830631641.3406227 },
     { -1236216005.4051337,  538630260.86758542,  33176731763.039818 },
     { -1830631641.34062  ,  33176731763.039852,  129438931.773489   }}},
   {{{  673103998.13990545, -668069192.64111376,  31296079671.362225 },
     { -668069192.64111066, -1236216005.4051337, -1830631641.34062   },
     {  31296079671.362202, -1830631641.3406143,  563112007.26520002 }},
    {{ -668069192.64111042, -1236216005.4051316, -1830631641.3406239 },
     { -1236216005.4051297,  538630260.86759949,  33176731763.039848 },
     { -1830631641.3406162,  33176731763.039825,  129438931.77348638 }},
    {{  94333561321.577164, -1830631641.3406117,  563112007.2652216  },
     { -1830631641.3406076,  96214213413.254761,  129438931.77349496 },
     {  563112007.26521027,  129438931.77348542,  157162202178.17346 }}}
  });

  Eigen::Tensor<double, 4> C_minmax_avg(3, 3, 3, 3);
  C_minmax_avg.setValues({
   {{{  159907669169.28964, -1597027924.4700937,  673103998.13990521 },
     { -1597027924.4700947,  93468746422.13858 , -668069192.64111018 },
     {  673103998.13990951, -668069192.64111471,  94333561321.577164 }},
    {{ -1597027924.4700994,  30431264771.923626, -668069192.64111602 },
     {  30431264771.92366 ,  3427659565.8107529, -1236216005.4051323 },
     { -668069192.64110804, -1236216005.4051311, -1830631641.3406143 }},
    {{  673103998.13990521, -668069192.64111769,  31296079671.362198 },
     { -668069192.64111066, -1236216005.4051304, -1830631641.3406196 },
     {  31296079671.362232, -1830631641.340621 ,  563112007.26521254 }}},
   {{{ -1597027924.4700985,  30431264771.923668, -668069192.64111245 },
     {  30431264771.923634,  3427659565.8107462, -1236216005.405134  },
     { -668069192.64110935, -1236216005.4051306, -1830631641.3406181 }},
    {{  93468746422.138611,  3427659565.8107529, -1236216005.4051263 },
     {  3427659565.8107624,  158027017077.612  ,  538630260.86759877 },
     { -1236216005.4051301,  538630260.86760139,  96214213413.254791 }},
    {{ -668069192.64110756, -1236216005.4051309, -1830631641.3406227 },
     { -1236216005.4051337,  538630260.86758542,  33176731763.039818 },
     { -1830631641.34062  ,  33176731763.039852,  129438931.773489   }}},
   {{{  673103998.13990545, -668069192.64111376,  31296079671.362225 },
     { -668069192.64111066, -1236216005.4051337, -1830631641.34062   },
     {  31296079671.362202, -1830631641.3406143,  563112007.26520002 }},
    {{ -668069192.64111042, -1236216005.4051316, -1830631641.3406239 },
     { -1236216005.4051297,  538630260.86759949,  33176731763.039848 },
     { -1830631641.3406162,  33176731763.039825,  129438931.77348638 }},
    {{  94333561321.577164, -1830631641.3406117,  563112007.2652216  },
     { -1830631641.3406076,  96214213413.254761,  129438931.77349496 },
     {  563112007.26521027,  129438931.77348542,  157162202178.17346 }}}
  });

  Eigen::Tensor<double, 5> F(3, 3, 2, 1, 1);
  F.setValues({
   {{{{  1.1002000000000001 }}, {{  1.1002000000000001 }}},
    {{{  0                  }}, {{  0                  }}},
    {{{  0                  }}, {{  0                  }}}},
   {{{{  0                  }}, {{  0                  }}},
    {{{  1                  }}, {{  1                  }}},
    {{{  0                  }}, {{  0                  }}}},
   {{{{  0                  }}, {{  0                  }}},
    {{{  0                  }}, {{  0                  }}},
    {{{  1                  }}, {{  1                  }}}}
  });
  Eigen::TensorMap<Eigen::Tensor<double, 5>> F_map(F.data(), 3, 3, mock_grid.cells[0], mock_grid.cells[1], mock_grid.cells[2]);

  double delta_t = 100.2;

  Eigen::Tensor<double, 3> mech2_homogenization_P_mock_result(3, 3, 2);
  mech2_homogenization_P_mock_result.setValues({
   {{  11823499031.8272  ,  11822773973.893665 },
    {  6593774.9170823097,  7412068.1404895782 },
    { -15122969.537146807,  9211038.9774441719 }},
   {{  5993251.1516828537,  6737018.8515625    },
    {  11709066032.578241,  11725937266.480543 },
    { -1647942.0415525436,  7174876.1495118141 }},
   {{ -13745654.91469276 ,  8372149.5886597633 },
    { -1647942.0415520668,  7174876.1495125294 },
    {  11722169413.974548,  11705689816.819708 }}
  });
  EXPECT_CALL(spectral, mechanical_response(testing::_, testing::_, testing::_)).WillOnce(testing::DoDefault());
  EXPECT_CALL(spectral, thermal_response(testing::_, testing::_, testing::_)).WillOnce(testing::DoDefault());
  EXPECT_CALL(spectral, mechanical_response2(testing::_, testing::_, testing::_))
    .WillOnce([&](double Delta_t, 
                  std::array<int, 2>& FEsolving_execIP, 
                  std::array<int, 2>& FEsolving_execElem) {
        *spectral.homogenization_P = mech2_homogenization_P_mock_result;
        return;
    });

  Eigen::Tensor<double, 4> expected_C_vol_avg(3, 3, 3, 3);
  expected_C_vol_avg.setValues({
   {{{  101011508261.97885,  191800998.51615727, -80978290.35567084  },
     {  168545919.53259182,  132692715699.64783,  82746677.237301841 },
     { -71160556.671300441,  82746677.237343624,  132585758240.21689 }},
    {{  96935377.243269324,  5612475924.5854769,  19782391.025365509 },
     { -5551763321.0263863,  9191471.4086551666,  33855495.482328892 },
     {  15468288.165500637,  33855495.482329361,  152626431.96479034 }},
    {{ -40879684.085652828,  19782480.497425646,  5587303820.5552998 },
     {  15468369.488949746, -9527484.6752063036,  49179711.019313    },
     { -5571395340.337841 ,  49179711.019312575, -58750396.625625253 }}},
   {{{  82320123.065666378, -5551763321.0263901,  15468288.165500866 },
     {  5702985572.4561415,  14721141.96982348 ,  28084682.327486701 },
     {  14059523.873389428,  30772128.233346753,  138726078.86268395 }},
    {{  118745174476.06424, -6092251.1595225334, -2551523.3903517947 },
     {  829374.50197339058,  136764155493.52937,  22019350.203842878 },
     { -2319145.0557865575,  19255169.818149209,  135822486728.19455 }},
    {{  39673631.293070376,  29306298.701880489,  42249036.082690969 },
     {  23949800.68738123 ,  30868717.622937799,  6251494715.0535841 },
     {  38401232.578340612, -5465458258.9414043,  37654251.861584127 }}},
   {{{ -34713904.908147037,  15468369.48894719 , -5571395340.3378325 },
     {  14059597.790355075, -8659775.2003132105,  44700700.799228013 },
     {  5685141526.5449924,  51067478.645617388, -56087188.339788169 }},
    {{  39673631.293015063,  29306298.701879919,  42249036.082695752 },
     {  26637246.593239576,  28104537.237188816, -5465458258.9414072 },
     {  44768010.424734056,  6255067671.4373055,  40418432.247201741 }},
    {{  118693841283.5643 ,  118201111.39940806, -44753431.993558377 },
     {  107436021.99545613,  135811044188.3848 ,  28805015.980077565 },
     { -43364988.165069044,  31569196.365751684,  136686982608.63882 }}}
  });

  Eigen::Quaterniond rot_bc_q(1, 0, 0, 0);
  Eigen::Tensor<double, 5> P(3, 3, 2, 1, 1);
  P = spectral.constitutive_response(P_av, C_vol_avg, C_minmax_avg, F_map, delta_t, rot_bc_q);
  // EXPECT_TRUE(tensor_eq(C_vol_avg, expected_C_vol_avg));
}

// TEST(SpectralTestFFTRandom, BasicTest) {
//   MockDiscretization mock_discretization;
//   int cells_[] = {2, 1, 1};
//   double geom_size_[] = {2e-5, 1e-5, 1e-5};
//   MockDiscretizedGrid mock_grid(mock_discretization, &cells_[0], &geom_size_[0]);
//   Spectral spectral;

//   ptrdiff_t cells1_fftw, cells1_offset, cells2_fftw;
//   spectral.set_up_fftw(cells1_fftw, cells1_offset, cells2_fftw, 9, 
//                        spectral.tensorField_real, spectral.tensorField_fourier, spectral.tensorField_fourier_fftw,
//                        FFTW_MEASURE, spectral.plan_tensor_forth, spectral.plan_tensor_back,
//                        "tensor");
//   mock_grid.cells1_tensor = cells1_fftw;
//   mock_grid.cells1_offset_tensor = cells1_offset;

//   fill_random(*spectral.tensorField_real);

//   spectral.tensorField_real->slice(Eigen::array<long, 5>({0, 0, mock_grid.cells[0], 0, 0}), 
//                                    Eigen::array<long, 5>({3, 3, mock_grid.cells0_reduced * 2 - mock_grid.cells[0], -1, -1})).setConstant(0);

//   auto tensorField_real_copy = *(spectral.tensorField_real);

//   fftw_mpi_execute_dft_r2c(spectral.plan_tensor_forth, spectral.tensorField_real->data(), spectral.tensorField_fourier_fftw);

//   std::complex<double> sum =   (*spectral.tensorField_fourier);
//   double tensorSumLocal = tensorField_real_copy.sum();
//   MPI_Allreduce(&tensorSumLocal, &tensorSum, 1, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);

//   double avg = tensorSum / tensorField_fourier->dimension(2) / tensorField_fourier->dimension(3) / tensorField_fourier->dimension(4);
//   double epsilon = 1e-12;

//   if (world_rank == 0) {
//     if (std::abs(avg - 1.0) > epsilon) {
//       std::cerr << "Mismatch avg tensorField FFT <-> real" << std::endl;
//       MPI_Abort(MPI_COMM_WORLD, 1);
//     }
//   }

//   fftw_execute(plan_tensor_back);

//   // Set the specified range to zero
//   tensorField_real->slice(Eigen::array<long, 5>({0, 0, cells(1), 0, 0}), Eigen::array<long, 5>({3, 3, cells1Red * 2 - cells(1), -1, -1})) = Eigen::Tensor<double, 5>::Zero(3, 3, cells1Red * 2 - cells(1), grid.cells[1], cells2_fftw);

//   double max_difference = (*tensorField_real - tensorField_real_copy * wgt).abs().
// }


int main(int argc, char **argv) {
    ::testing::InitGoogleTest(&argc, argv);
    ::testing::AddGlobalTestEnvironment(new PetscMpiEnv);
    return RUN_ALL_TESTS();
}