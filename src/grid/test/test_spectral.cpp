#include <gtest/gtest.h>
#include <gmock/gmock.h>

#include <unsupported/Eigen/CXX11/Tensor>
#include <fftw3-mpi.h>
#include <random>

#include "conftest.h"
#include "init_environments.h"
#include "conftest.h"
#include "../utilities_tensor.h"

#include "../spectral.h"

TEST_F(GridTestSetup, SpectralTestInit) {
  
  MockDiscretizedGrid mock_grid(std::array<int, 3>{2,1,1});
  Config config;

  gridTestSetup_init_discretization(mock_grid);
  Spectral spectral;

  Eigen::Tensor<std::complex<double>, 4> expected_xi1st(3, 2, 1, 1);
  expected_xi1st.setValues({
   {{{ c( 0 ,  0 ) }},
    {{ c( 0 ,  0 ) }}},
   {{{ c( 0 ,  0 ) }},
    {{ c( 0 ,  0 ) }}},
   {{{ c( 0 ,  0 ) }},
    {{ c( 0 ,  0 ) }}}
  });

  Eigen::Tensor<std::complex<double>, 4> expected_xi2nd;
  expected_xi2nd.resize(3, 2, 1, 1);
  expected_xi2nd.setValues({
   {{{ c( 0               ,  0                ) }},
    {{ c( 0               ,  314159.2653589793) }}},
   {{{ c( 0               ,  0                ) }},
    {{ c( 0               ,  0                ) }}},
   {{{ c( 0               ,  0                ) }},
    {{ c( 0               ,  0                ) }}}
  });

  spectral.init(0, mock_grid, config.numerics.fft.fftw_planner_flag, config.numerics.fft.fftw_timelimit);
  EXPECT_TRUE(tensor_eq(spectral.xi1st, expected_xi1st));
  EXPECT_TRUE(tensor_eq(spectral.xi2nd, expected_xi2nd));
  // TODO: mock calls to set_up_fftw template function
}

TEST_F(GridTestSetup, SpectralTestHomogenizationFetchTensors) {
  MockDiscretizedGrid mock_grid(std::array<int, 3>{2,1,1});

  gridTestSetup_init_discretization(mock_grid);
  Spectral spectral;
  gridTestSetup_mock_homogenization_tensors(spectral, mock_grid.n_cells_local);
}

TEST_F(GridTestSetup, SpectralTestConstitutiveResponse) {
  // testing with 10th iteration of tensionX
  class PartialMockSpectral : public Spectral {
    public:
    using array2 = std::array<int, 2>;
    MOCK_METHOD(void, mechanical_response, (double delta_t, int cell_start, int cell_end), (override));
    MOCK_METHOD(void, thermal_response, (double delta_t, int cell_start, int cell_end), (override));
    MOCK_METHOD(void, mechanical_response2, (double delta_t, array2& FEsolving_execIP, array2& FEsolving_execElem), (override));
  };

  MockDiscretizedGrid mock_grid(std::array<int, 3>{2,1,1});
  gridTestSetup_init_discretization(mock_grid);
  PartialMockSpectral spectral;
  gridTestSetup_mock_homogenization_tensors(spectral, mock_grid.n_cells_local);

  Eigen::Tensor<double, 5> F(3, 3, 2, 1, 1);
  F.setValues({
   {{{{  1.0099999999999989  }}, {{  1.0099999999999989  }}},
    {{{  0                   }}, {{  0                   }}},
    {{{  0                   }}, {{  0                   }}}},
   {{{{  0                   }}, {{  0                   }}},
    {{{  0.99491389046221812 }}, {{  0.99491389046221812 }}},
    {{{  0                   }}, {{  0                   }}}},
   {{{{  0                   }}, {{  0                   }}},
    {{{  0                   }}, {{  0                   }}},
    {{{  0.99553784566080206 }}, {{  0.99553784566080206 }}}}
  });
  
  Eigen::Tensor<double, 3> mech2_homogenization_P_result(3, 3, 2);
  mech2_homogenization_P_result.setValues({
   {{  76618757.673406869    ,  95416845.745684087     }, {  1.0809803231428855e-09,  9513554.8520400338     }, {  2.1364718882426231e-10,  24877917.757313561     }},
   {{  1.0648339988229654e-09,  9371453.3366028406     }, {  4802338.8304373538    , -4802321.2334573204     }, {  3.0532654890151484e-29,  1490398.8818579731     }},
   {{  2.1058798227088408e-10,  24521691.731329277     }, {  3.0551803289754612e-29,  1491333.5779550085     }, {  4518912.3578789225    , -4518886.1784243658     }}
  });

  Eigen::Tensor<double, 5> mech2_homogenization_dPdF_result(3, 3, 3, 3, 2);
  mech2_homogenization_dPdF_result.setValues({
   {{{{  75997448329.556061     ,  76638502692.314667      }, { -2.8249759687228555e-06 ,  305934943.59825969      }, { -2.9924266480414589e-06 ,  644304131.78473306      }},
     {{ -2.7838343227958545e-06 ,  292086603.45547843      }, {  74918562895.884415     ,  74704554932.324402      }, {  1.8975307765149021e-26 , -34444243.988004841      }},
     {{ -2.9497866995786241e-06 ,  610799455.42980409      }, {  1.8987208033140373e-26 , -34465845.520868838      }, {  75021985120.678635     ,  74673847049.48494       }}},
    {{{ -2.819850200224989e-06  ,  337757178.32962871      }, {  5719001102.6017056     ,  6056345137.3926411      }, { -2.2195565332327443e-07 ,  703724254.45925426      }},
     {{  5628823064.7213955     ,  5970637846.4889364      }, { -2.7783801862294437e-06 , -3956088132.1682458      }, { -3.953942327112421e-11  , -2541165473.571414       }},
     {{ -2.1877747816008779e-07 ,  692171083.47087383      }, { -3.9564220219820511e-11 , -2542759152.605248       }, { -2.7813868265478372e-06 ,  3702398919.2792339      }}},
    {{{ -2.9900585506111433e-06 ,  718449473.41270924      }, { -2.2195347111866324e-07 ,  704327302.52610946      }, {  6053528074.4242678     ,  6541951419.0398407      }},
     {{ -2.1863820935867625e-07 ,  692331304.44879675      }, { -2.9449735081251387e-06 , -2602334186.5277319      }, { -4.3947571606378793e-10 ,  2997039790.3745522      }},
     {{  5962373646.8238525     ,  6452751593.4034271      }, { -4.3975133102938252e-10 ,  2998919368.6732292      }, { -2.949107355217164e-06  ,  2108646399.257376       }}}},
   {{{{ -2.7787851165801907e-06 ,  323433517.67309183      }, {  5628823064.7213955     ,  5970637846.4889402      }, { -2.1864035896825983e-07 ,  691737263.95539844      }},
     {{  5620606979.3882351     ,  5975928114.7481947      }, { -2.7358099598148367e-06 , -3887577700.5598173      }, {  1.7258314045072848e-10 , -2478577132.8601665      }},
     {{ -2.1550965538788714e-07 ,  681832302.49649048      }, { -3.8973259665352106e-11 , -2504778614.8781233      }, { -2.7398419687931432e-06 ,  3647097141.4091458      }}},
    {{{  74544558934.094482     ,  74300763636.700607      }, { -2.7679417560798998e-06 , -3959103793.3689556      }, { -2.9322591417974982e-06 , -2666926573.7720499      }},
     {{ -2.7255274458045389e-06 , -3890548317.6068683      }, {  80290349436.220337     ,  83128839973.56012       }, {  1.8597575517164496e-26 , -373890291.75764078      }},
     {{ -2.8902722266775013e-06 , -2628738946.3253231      }, {  1.8578530889800296e-26 , -375623732.93864334      }, {  73770670102.993805     ,  71126525858.105591      }}},
    {{{ -1.5284787305876761e-26 , -1011772.058218075       }, {  4.8934980257522474e-12 , -2510011247.1474171      }, {  2.6207669539594788e-11 ,  2959483913.6407766      }},
     {{  2.1635237866070565e-10 , -2447888249.0821013      }, { -1.5049332244667471e-26 , -359259042.40740067      }, {  3277849447.5049543     ,  5318429416.2438231      }},
     {{  2.583240284479018e-11  ,  2917107167.9739995      }, {  3275363118.3982844     ,  5326306830.5272188      }, { -1.5100584091988915e-26 ,  378189264.74451494      }}}},
   {{{{ -2.9474525108518043e-06 ,  683883112.52892268      }, { -2.1877532720238745e-07 ,  692765496.51374722      }, {  5962373646.8238544     ,  6452751593.403429       }},
     {{ -2.155075365584874e-07  ,  682417836.94503427      }, { -2.902804536442614e-06  , -2565071455.1933451      }, { -4.3318287880235854e-10 ,  2954125283.4348435      }},
     {{  5952858822.2974749     ,  6454827017.2134295      }, {  6.3682352373888743e-10 ,  2965397311.5058451      }, { -2.9066676591505327e-06 ,  2103084373.2747815      }}},
    {{{ -1.529437308268639e-26  , -1012406.5859487588      }, {  4.8965669582112615e-12 , -2511585387.9662085      }, {  2.6224105546578717e-11 ,  2961339938.9619098      }},
     {{  4.8234282002997277e-12 , -2474070484.7222981      }, { -1.5089478359522715e-26 , -360983307.67463511      }, {  3275363118.3982859     ,  5326306830.5272179      }},
     {{  1.0961266744910502e-09 ,  2928355980.3217106      }, {  3282244137.0363598     ,  5324820324.5023336      }, { -1.5079365590492654e-26 ,  379924462.53001869      }}},
    {{{  74642692235.830078     ,  74351722653.6521        }, { -2.7716356269551043e-06 ,  3623476838.4076166      }, { -2.9361095064379869e-06 ,  1986099765.7817662      }},
     {{ -2.7302364203540535e-06 ,  3569353899.306798       }, {  73766349718.781845     ,  71155957635.997513      }, {  1.8589288345723389e-26 ,  361292765.36846304      }},
     {{ -2.8938559261090982e-06 ,  1982292480.7170658      }, {  1.863163527978923e-26  ,  363017366.60011822      }, {  80044430276.284103     ,  82914121019.220215      }}}}
  });

  EXPECT_CALL(spectral, mechanical_response(testing::_, testing::_, testing::_)).WillOnce(testing::DoDefault());
  EXPECT_CALL(spectral, thermal_response(testing::_, testing::_, testing::_)).WillOnce(testing::DoDefault());
  EXPECT_CALL(spectral, mechanical_response2(testing::_, testing::_, testing::_))
    .WillOnce([&](double delta_t, 
                  std::array<int, 2>& FEsolving_execIP, 
                  std::array<int, 2>& FEsolving_execElem) {
        *spectral.homogenization_P = mech2_homogenization_P_result;
        *spectral.homogenization_dPdF = mech2_homogenization_dPdF_result;
        return;
    });

  Eigen::Tensor<double, 2> expected_P_av(3, 3);
  expected_P_av.setValues({
   {  86017801.709545478,  4756777.4260200178,  12438958.87865678  },
   {  4685726.6683014212,  8.798490016721189 ,  745199.44092898653 },
   {  12260845.865664639,  745666.78897750424,  13.089727278333157 }
  });

  Eigen::Tensor<double, 4> expected_C_vol_avg(3, 3, 3, 3);
  expected_C_vol_avg.setValues({
   {{{  76317975510.935364 ,  152967471.79912844 ,  322152065.89236504  },
     {  146043301.72773781 ,  74811558914.104401 , -17222121.99400242   },
     {  305399727.71490055 , -17232922.760434419 ,  74847916085.081787  }},
    {{  168878589.16481295 ,  5887673119.9971733 ,  351862127.22962701  },
     {  5799730455.6051655 , -1978044066.0841243 , -1270582736.785707   },
     {  346085541.7354368  , -1271379576.302624  ,  1851199459.6396155  }},
    {{  359224736.70635313 ,  352163651.26305461 ,  6297739746.7320538  },
     {  346165652.22439826 , -1301167093.2638674 ,  1498519895.1872761  },
     {  6207562620.1136398 ,  1499459684.3366146 ,  1054323199.6286865  }}},
   {{{  161716758.83654451 ,  5799730455.6051674 ,  345868631.9776991   },
     {  5798267547.0682144 , -1943788850.2799101 , -1239288566.4300833  },
     {  340916151.24824512 , -1252389307.4390616 ,  1823548570.7045715  }},
    {{  74422661285.397552 , -1979551896.6844792 , -1333463286.8860264  },
     { -1945274158.8034356 ,  81709594704.890228 , -186945145.87882039  },
     { -1314369473.162663  , -187811866.46932167 ,  72448597980.549698  }},
    {{ -505886.02910903748 , -1255005623.5737085 ,  1479741956.8203883  },
     { -1223944124.5410507 , -179629521.20370033 ,  4298139431.8743887  },
     {  1458553583.9869998 ,  4300834974.4627514 ,  189094632.37225747  }}},
   {{{  341941556.26445985 ,  346382748.25687349 ,  6207562620.1136417  },
     {  341208918.47251701 , -1282535727.596674  ,  1477062641.7174218  },
     {  6203842919.7554522 ,  1482698655.7529225 ,  1051542186.6373893  }},
    {{ -506203.29297437938 , -1255792693.9831042 ,  1480669969.4809549  },
     { -1237035242.3611491 , -180491653.83731756 ,  4300834974.4627514  },
     {  1464177990.1608553 ,  4303532230.7693462 ,  189962231.26500934  }},
    {{  74497207444.741089 ,  1811738419.2038069 ,  993049882.89088166  },
     {  1784676949.6533976 ,  72461153677.389679 ,  180646382.68423152  },
     {  991146240.35853148 ,  181508683.30005911 ,  81479275647.752167  }}}
  });

  Eigen::Tensor<double, 4> expected_C_minmax_avg(3, 3, 3, 3);
  expected_C_minmax_avg.setValues({
   {{{  76317975510.935364 ,  152967471.79912844 ,  322152065.89236504  },
     {  146043301.72773781 ,  74811558914.104401 , -17222121.99400242   },
     {  305399727.71490055 , -17232922.760434419 ,  74847916085.081787  }},
    {{  168878589.16481295 ,  5887673119.9971733 ,  351862127.22962701  },
     {  5799730455.6051655 , -1978044066.0841243 , -1270582736.785707   },
     {  346085541.7354368  , -1271379576.302624  ,  1851199459.6396155  }},
    {{  359224736.70635313 ,  352163651.26305461 ,  6297739746.7320538  },
     {  346165652.22439826 , -1301167093.2638674 ,  1498519895.1872761  },
     {  6207562620.1136398 ,  1499459684.3366146 ,  1054323199.6286865  }}},
   {{{  161716758.83654451 ,  5799730455.6051674 ,  345868631.9776991   },
     {  5798267547.0682144 , -1943788850.2799101 , -1239288566.4300833  },
     {  340916151.24824512 , -1252389307.4390616 ,  1823548570.7045715  }},
    {{  74422661285.397552 , -1979551896.6844792 , -1333463286.8860264  },
     { -1945274158.8034356 ,  81709594704.890228 , -186945145.87882039  },
     { -1314369473.162663  , -187811866.46932167 ,  72448597980.549698  }},
    {{ -505886.02910903748 , -1255005623.5737085 ,  1479741956.8203883  },
     { -1223944124.5410507 , -179629521.20370033 ,  4298139431.8743887  },
     {  1458553583.9869998 ,  4300834974.4627514 ,  189094632.37225747  }}},
   {{{  341941556.26445985 ,  346382748.25687349 ,  6207562620.1136417  },
     {  341208918.47251701 , -1282535727.596674  ,  1477062641.7174218  },
     {  6203842919.7554522 ,  1482698655.7529225 ,  1051542186.6373893  }},
    {{ -506203.29297437938 , -1255792693.9831042 ,  1480669969.4809549  },
     { -1237035242.3611491 , -180491653.83731756 ,  4300834974.4627514  },
     {  1464177990.1608553 ,  4303532230.7693462 ,  189962231.26500934  }},
    {{  74497207444.741089 ,  1811738419.2038069 ,  993049882.89088166  },
     {  1784676949.6533976 ,  72461153677.389679 ,  180646382.68423152  },
     {  991146240.35853148 ,  181508683.30005911 ,  81479275647.752167  }}}
  });

  Eigen::Tensor<double, 5> P(3, 3, 2, 1, 1);
  Eigen::Tensor<double, 2> P_av(3, 3);
  Eigen::Tensor<double, 4> C_vol_avg(3, 3, 3, 3);
  Eigen::Tensor<double, 4> C_minmax_avg(3, 3, 3, 3);
  Eigen::TensorMap<Eigen::Tensor<double, 5>> F_map(F.data(), 3, 3, 2, 1, 1);
  double delta_t = 1;

  P = spectral.constitutive_response(P_av, C_vol_avg, C_minmax_avg, F_map, delta_t, 0);

  EXPECT_TRUE(tensor_eq(P_av, expected_P_av));
  EXPECT_TRUE(tensor_eq(C_vol_avg, expected_C_vol_avg));
  EXPECT_TRUE(tensor_eq(C_minmax_avg, expected_C_minmax_avg));
}

int main(int argc, char **argv) {
    ::testing::InitGoogleTest(&argc, argv);
    ::testing::AddGlobalTestEnvironment(new PetscMpiEnv);
    return RUN_ALL_TESTS();
}
